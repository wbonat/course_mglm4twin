install.packages("~/Downloads/mglm4twin_0.2.0.zip", repos = NULL, type = "win.binary")
install.packages("~/Downloads/mglm4twin_0.2.0.tar.gz", repos = NULL, type = "source")
library(mglm4twin)
library(ggplot2)
library(dplyr)
library(tidyr)
data(anthro)
anthro %>%
pivot_longer(names_to = 'Trait',
values_to = 'response',
cols = -c(Group, Twin, age, Twin_pair)) %>%
ggplot() +
geom_histogram(aes(response), bins = 20) +
facet_wrap(~Trait, scales = "free")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
## Loading extra packages
library(Matrix)
## Loading extra packages
library(Matrix) # Linear algebra used by the mglm4twin package
library(dplyr) # Data manipulation
library(tidyr) # data manipulation
library(ggplot2) # Data visualization
# Download the .tar.gz (for linux) or .zip (for Windows)
fn <- "http://leg.ufpr.br/~wagner/mglm4twin"
# Download the .tar.gz (for linux) or .zip (for Windows)
fn <- "http://leg.ufpr.br/~wagner/mglm4twin/mglm4twin_0.2.0.tar.gz"
download.file(fn)
download.file(fn, destfile = "mglm4twin_0.2.0.tar.gz ")
# Download the .tar.gz (for linux) or .zip (for Windows)
fn <- "www.leg.ufpr.br/~wagner/mglm4twin/source/mglm4twin_0.2.0.tar.gz"
download.file(fn, destfile = "mglm4twin_0.2.0.tar.gz ")
# Installing
install.packages("mglm4twin_0.2.0.tar.gz", repos = NULL,
lib.loc = "/path/to/your/R/library",
dependencies = TRUE)
getwd()
# Installing
install.packages("/home/wagner/Downloads/mglm4twin_0.2.0.tar.gz", repos = NULL,
lib.loc = "/path/to/your/R/library",
dependencies = TRUE)
## Loading package
library(mglm4twin)
version(mglm4twin)
version("mglm4twin")
version("mglm4twin")
package_version(mglm4twin)
package_version("mglm4twin")
## Loading package
library(mglm4twin)
packageVersion("mglm4twin")
## Loading data set
data(bpdrds)
glimpse(bpdrds)
head(bpdrds)
# Checking number of twin pairs and ordering the data set
cod = table(bpdrds$id) == 2
cod
# Checking number of twin pairs and ordering the data set
cod = table(bpdrds$Twin) == 2
cod
cod = rownames(cod[cod == TRUE])
# Checking number of twin pairs and ordering the data set
cod = table(bpdrds$Twin) == 2
cod = rownames(cod[cod == TRUE])
data = bpdrds[which(bpdrds$Twin %in% cod),]
data = bpdrds[order(data$Twin),]
data$Group
data = data[order(data$Group),]
dim(data)
head(data)
## Linear predictor
form_BPD <- BPD ~ BW + GA + gender + Group*Twin_pair
form_RDS <- RDS ~ BW + GA + gender + Group*Twin_pair
## Linear predictor
form_BPD <- BPD ~ BW + GA + gender + Group*Twin_pair
form_RDS <- RDS ~ BW + GA + gender + Group*Twin_pair
data[data$Group == DZ,]
data[data$Group == "DZ",]
dim(data[data$Group == "DZ",])[1]
## Matrix linear predictor
N_DZ <- dim(data[data$Group == "DZ",])[1]/2 # number of DZ twin pairs
N_MZ <- dim(data[data$Group == "MZ",])[1]/2 # number of MZ twin pairs
biv_ACE <- mt_twin(N_DZ = N_DZ, N_MZ = N_MZ, n_resp = 2, model = "ACE")
length(biv_ACE)
image(biv_ACE[[1]])
image(biv_ACE[[1]][1:10,1:10])
biv_ACE[[1]][1:10,1:10]
biv_ACE[[2]][1:10,1:10] # E effect for the first response
biv_ACE[[3]][1:10,1:10] # E effect for the first response
biv_ACE[[4]][1:10,1:10] # E effect for the first response
biv_ACE[[3]][1:10,1:10] # E effect for the first response
biv_ACE[[3]][1:10,11:20] # E effect for the first response
image(biv_ACE[[3]])
## Important to check the size of the matrices
lapply(biv_ACE, dim)
## Model fitting
fit_ACE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_ACE,
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = data)
## Model's output
fit_ACE
# Summary
summary(fit_ACE, model = "ACE")
# Special summary
summary(fit_ACE, model = "ACE", biometrical = TRUE)
summary.mglm4twin
# Special summary
summary(fit_ACE, model = "ACE", biometric = TRUE)
## Model comparision
biv_E <- mt_twin(N_DZ = N_DZ, N_MZ = N_MZ, n_resp = 2, model = "E")
biv_E <- mt_twin(N_DZ = N_DZ, N_MZ = N_MZ, n_resp = 2, model = "E")
biv_AE <- mt_twin(N_DZ = N_DZ, N_MZ = N_MZ, n_resp = 2, model = "AE")
biv_CE <- mt_twin(N_DZ = N_DZ, N_MZ = N_MZ, n_resp = 2, model = "CE")
biv_ACE <- mt_twin(N_DZ = N_DZ, N_MZ = N_MZ, n_resp = 2, model = "ACE")
## Fitting
fit_E <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_E,
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = data)
# AE model
fit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = data)
# CE model
fit_CE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_CE,
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = data)
fit_ACE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_ACE,
link = c("logit", "logit"),
variance = c("binomialP", "binomialP"),
data = data)
## Comparing
gof(fit_ACE)
## Comparing
cbind(gof(fit_E), gof(fit_AE), gof(fit_CE), gof(fit_ACE))
## Comparing
rbind(gof(fit_E), gof(fit_AE), gof(fit_CE), gof(fit_ACE))
## AE models provides the best balance between gof and complexity
summary(fit_AE, model = "AE", biometric = TRUE)
## Is the bivariate model better than fit two separate models?
AE <- mt_twin(N_DZ = N_DZ, N_MZ = N_MZ, n_resp = 1, model = "AE")
## Fitting univariate models
uni_AE <- mglm4twin(linear_pred = c(form_BPD),
matrix_pred = AE,
link = c("logit"),
variance = c("binomialP"),
data = data)
summary(uni_AE, biometric = TRUE)
summary(uni_AE, model = "AE", biometric = TRUE)
## Fitting univariate models
BPD_AE <- mglm4twin(linear_pred = c(form_BPD),
matrix_pred = AE,
link = c("logit"),
variance = c("binomialP"),
data = data)
summary(BPD_AE, model = "AE", biometric = TRUE)
RDS_AE <- mglm4twin(linear_pred = c(form_RDS),
matrix_pred = AE,
link = c("logit"),
variance = c("binomialP"),
data = data)
summary(RDS_AE, model = "AE", biometric = TRUE)
gof(list(BPD_AE, RDS_AE))
rbind(gof(list(BPD_AE, RDS_AE)), gof(fit_AE))
## Change the link function
fit_ACE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_ACE,
link = c("probit", "probit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(fit_ACE, model = "AE", biometric = TRUE)
summary(fit_ACE, model = "ACE", biometric = TRUE)
## Mixing link function
fit_ACE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_ACE,
link = c("loglog", "cauchit"),
variance = c("binomialP", "binomialP"),
data = data)
## Mixing link function
fit_ACE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_ACE,
link = c("cloglog", "cauchit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(fit_ACE, model = "ACE", biometric = TRUE)
## Change the link function
fit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("probit", "probit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(fit_AE, model = "AE", biometric = TRUE)
## Mixing link function
fit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("cloglog", "cauchit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(fit_AE, model = "AE", biometric = TRUE)
probit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("probit", "probit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(probit_AE, model = "AE", biometric = TRUE)
summary(clog_cauchit_AE, model = "AE", biometric = TRUE)
## Mixing link function
clog_cauchit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("cloglog", "cauchit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(clog_cauchit_AE, model = "AE", biometric = TRUE)
## Comparing
rbind(gof(fit_AE), gof(probit_AE), gof(clog_cauchit_AE))
## Mixing link function
clog_cauchit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("cloglog", "cauchit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(clog_cauchit_AE, model = "AE", biometric = TRUE)
## Comparing
rbind(gof(fit_AE), gof(probit_AE), gof(clog_cauchit_AE))
## Mixing link function
clog_cauchit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("cauchit", "cauchit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(clog_cauchit_AE, model = "AE", biometric = TRUE)
## Comparing
rbind(gof(fit_AE), gof(probit_AE), gof(clog_cauchit_AE))
## Mixing link function
clog_cauchit_AE <- mglm4twin(linear_pred = c(form_BPD, form_RDS),
matrix_pred = biv_AE,
link = c("cloglog", "cauchit"),
variance = c("binomialP", "binomialP"),
data = data)
summary(clog_cauchit_AE, model = "AE", biometric = TRUE)
## Comparing
rbind(gof(fit_AE), gof(probit_AE), gof(clog_cauchit_AE))
## Loading package
library(mglm4twin)
packageVersion("mglm4twin")
## Loading data set
data(anthro)
## Loading data set
data(anthro) ## The data set is already organized. Check Example 1 for details.
head(athro)
head(anthro)
# Wide format
data_graph <- anthro %>% select(weight, height, Twin, Twin_pair, Group) %>%
pivot_wider(names_from = 'Twin_pair',
values_from = c('height', 'weight')) %>%
pivot_longer(names_to = 'Trait',
values_to = 'resposta',
cols = -c(Group, Twin)) %>%
separate(col = Trait, into = c("Trait", "Twin_pair"), sep = "_") %>%
pivot_wider(names_from = 'Twin_pair',
values_from = c('resposta'))
names(data_graph)[4:5] <- c("Twin_1", "Twin_2")
data_graph$Trait <- as.factor(data_graph$Trait)
levels(data_graph$Trait) <- c("Height (meters)", "Weight (kg)")
ggplot(data_graph) +
geom_point(aes(y = Twin_1, x = Twin_2)) +
geom_smooth(aes(y = Twin_1, x = Twin_2), method = 'lm') +
facet_wrap(~ Trait + Group, scales = "free")
## Correlation between responses
ggplot(data_graph2) +
geom_point(aes(y = height_1, x = weight_1)) +
geom_smooth(aes(y = height_1, x = weight_1), method = 'lm') +
facet_wrap(~ Group)
data_graph2 <- anthro %>% select(weight, height, Twin, Twin_pair, Group) %>%
pivot_wider(names_from = 'Twin_pair',
values_from = c('height', 'weight'))
ggplot(data_graph2) +
geom_point(aes(y = height_1, x = weight_1)) +
geom_smooth(aes(y = height_1, x = weight_1), method = 'lm') +
facet_wrap(~ Group)
ggplot(data_graph2) +
geom_point(aes(y = height_2, x = weight_2)) +
geom_smooth(aes(y = height_2, x = weight_2), method = 'lm') +
facet_wrap(~ Group)
## Linear predictor
form_Wt <- weight ~ age + Group*Twin_pair
form_Ht <- height ~ age + Group*Twin_pair
## Matrix linear predictor
Z_E <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 1, model = "E")
Z_AE <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 1, model = "AE")
Z_CE <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 1, model = "CE")
Z_ACE <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 1, model = "ACE")
## Fitting
Wt_E <- mglm4twin(linear_pred = c(form_Wt),
matrix_pred = Z_E,
data = anthro)
Wt_AE <- mglm4twin(linear_pred = c(form_Wt),
matrix_pred = Z_AE,
data = anthro)
Wt_CE <- mglm4twin(linear_pred = c(form_Wt),
matrix_pred = Z_CE,
data = anthro)
Wt_ACE <- mglm4twin(linear_pred = c(form_Wt),
matrix_pred = Z_ACE,
data = anthro)
## Fitting · height
Ht_E <- mglm4twin(linear_pred = c(form_Ht),
matrix_pred = Z_E,
data = anthro)
Ht_AE <- mglm4twin(linear_pred = c(form_Ht),
matrix_pred = Z_AE,
data = anthro)
Ht_CE <- mglm4twin(linear_pred = c(form_Ht),
matrix_pred = Z_CE,
data = anthro)
Ht_ACE <- mglm4twin(linear_pred = c(form_Ht),
matrix_pred = Z_ACE,
data = anthro)
## Fitting bivariate models
## Matrix linear predictor
Z_E <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "E")
Z_AE <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "AE")
Z_CE <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "CE")
Z_ACE <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "ACE")
biv_E <- mglm4twin(linear_pred = c(form_Wt, form_Ht),
matrix_pred = Z_E,
data = anthro)
biv_AE <- mglm4twin(linear_pred = c(form_Wt, form_Ht),
matrix_pred = Z_AE,
data = anthro)
biv_CE <- mglm4twin(linear_pred = c(form_Wt, form_Ht),
matrix_pred = Z_CE,
data = anthro)
biv_ACE <- mglm4twin(linear_pred = c(form_Wt, form_Ht),
matrix_pred = Z_ACE,
data = anthro)
## Regression models for the dispersion components -----------------------------
biv0 <- list("formE1" = ~ age, "formE2" = ~ age, "formE12" = ~ age,
"formA1" = ~ age, "formA2" = ~ age, "formA12" = ~ age,
"formC1" = ~ age, "formC2" = ~ age, "formC12" = ~ age)
Z_biv0 <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "ACE",
formula = biv0, data = anthro)
## Special case of ACE model
biv4 <- list("formE1" = ~ age, "formE2" = ~ age, "formE12" = ~ 1,
"formA1" = ~ age, "formA2" = ~ 1, "formA12" = ~ 1)
Z_biv4 <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "AE",
formula = biv4, data = anthro)
## Model fitting
control_initial <- list()
control_initial$regression <- list("R1" = c(0.13, 0.10, -0.20, -0.02, 0.037),
"R2" = c(0.23, 0.01, -0.27, -0.11, 0.11))
control_initial$power <- list(c(0), c(0))
control_initial$tau <- c(0.15, 0, 0.12, rep(0,15))
fit_0 <- mglm4twin(linear_pred = c(form_Wt, form_Ht), matrix_pred = Z_biv0,
control_initial = control_initial,
control_algorithm = list(tuning = 0.5),
power_fixed = c(TRUE, TRUE),
data = anthro)
## Regression models for the dispersion components -----------------------------
biv0 <- list("formE1" = ~ age, "formE2" = ~ age, "formE12" = ~ age,
"formA1" = ~ age, "formA2" = ~ age, "formA12" = ~ age,
"formC1" = ~ age, "formC2" = ~ age, "formC12" = ~ age)
Z_biv0 <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "ACE",
formula = biv0, data = anthro)
## Special case of ACE model
biv4 <- list("formE1" = ~ age, "formE2" = ~ age, "formE12" = ~ 1,
"formA1" = ~ age, "formA2" = ~ 1, "formA12" = ~ 1)
Z_biv4 <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "AE",
formula = biv4, data = anthro)
## Model fitting
control_initial <- list()
control_initial$regression <- list("R1" = c(0.13, 0.10, -0.20, -0.02, 0.037),
"R2" = c(0.23, 0.01, -0.27, -0.11, 0.11))
control_initial$power <- list(c(0), c(0))
control_initial$tau <- c(0.15, 0, 0.12, rep(0,15))
fit_0 <- mglm4twin(linear_pred = c(form_Wt, form_Ht), matrix_pred = Z_biv0,
control_initial = control_initial,
control_algorithm = list(tuning = 0.5),
power_fixed = c(TRUE, TRUE),
data = anthro)
head(athro)
head(anthro)
anthro$age <- (anthro$age - mean(anthro$age))/sd(anthro$age)
anthro$weight <- (anthro$weight - mean(anthro$weight))/sd(anthro$weight)
anthro$height <- (anthro$height - mean(anthro$height))/sd(anthro$height)
## Easy computation
anthro$age <- (anthro$age - mean(anthro$age))/sd(anthro$age)
anthro$weight <- (anthro$weight - mean(anthro$weight))/sd(anthro$weight)
anthro$height <- (anthro$height - mean(anthro$height))/sd(anthro$height)
biv0 <- list("formE1" = ~ age, "formE2" = ~ age, "formE12" = ~ age,
"formA1" = ~ age, "formA2" = ~ age, "formA12" = ~ age,
"formC1" = ~ age, "formC2" = ~ age, "formC12" = ~ age)
Z_biv0 <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "ACE",
formula = biv0, data = anthro)
## Special case of ACE model
biv4 <- list("formE1" = ~ age, "formE2" = ~ age, "formE12" = ~ 1,
"formA1" = ~ age, "formA2" = ~ 1, "formA12" = ~ 1)
Z_biv4 <- mt_twin(N_DZ = 327, N_MZ = 534, n_resp = 2, model = "AE",
formula = biv4, data = anthro)
## Model fitting
control_initial <- list()
control_initial$regression <- list("R1" = c(0.13, 0.10, -0.20, -0.02, 0.037),
"R2" = c(0.23, 0.01, -0.27, -0.11, 0.11))
control_initial$power <- list(c(0), c(0))
control_initial$tau <- c(0.15, 0, 0.12, rep(0,15))
## Initial values
control_initial <- list()
control_initial$regression <- list("R1" = c(0.13, 0.10, -0.20, -0.02, 0.037),
"R2" = c(0.23, 0.01, -0.27, -0.11, 0.11))
control_initial$power <- list(c(0), c(0))
control_initial$tau <- c(0.15, 0, 0.12, rep(0,15))
# Model fitting
fit_0 <- mglm4twin(linear_pred = c(form_Wt, form_Ht), matrix_pred = Z_biv0,
control_initial = control_initial,
control_algorithm = list(tuning = 0.5),
power_fixed = c(TRUE, TRUE),
data = anthro)
control_initial$tau <- c(0.15, 0, 0.12, rep(0,6))
fit_4 <- mglm4twin(linear_pred = c(form_Wt, form_Ht), matrix_pred = Z_biv4,
control_initial = control_initial,
control_algorithm = list(tuning = 0.5),
power_fixed = c(TRUE, TRUE),
data = anthro)
## Computing measures of interest
Age = seq(-1.90, 1.70, l = 100)
point <- fit_4$Covariance
# Heritability
h_wt <- (point[6] + point[7]*Age)/(point[1] + point[2]*Age + point[6] + point[7]*Age)
h_ht <- (point[8])/(point[3] + point[4]*Age + point[8])
h_ht_wt <- point[9]/(point[5] + point[9])
# Genetic and phenotipic correlation
r_G <- point[9]/(sqrt(point[6] + point[7]*Age)*sqrt(point[8]))
std_1 <- sqrt(point[1] + point[2]*Age + point[6] + point[7]*Age)
std_2 <- sqrt(point[3] + point[4]*Age + point[8])
r_P <- (point[9] + point[5])/(std_1*std_2)
require(mvtnorm)
#> Loading required package: mvtnorm
Age = seq(-1.90, 1.70, l = 50)
# Point estimates
point1 <- fit_4$Covariance
# Covariance matrix (otimist - Gaussian case -> maximum likelihood estimator)
COV <- -2*fit_4$joint_inv_sensitivity[11:19, 11:19]
## Simulating from the assymptotic ditribution
point <- rmvnorm(n = 10000, mean = point1, sigma = as.matrix(COV))
res_h_wt <- matrix(NA, nrow = 50, ncol = 10000)
res_h_ht <- matrix(NA, nrow = 50, ncol = 10000)
res_ht_wt <- matrix(NA, nrow = 50, ncol = 10000)
res_r_G <- matrix(NA, nrow = 50, ncol = 10000)
res_r_P <- matrix(NA, nrow = 50, ncol = 10000)
res_r_E <- matrix(NA, nrow = 50, ncol = 10000)
for(i in 1:10000) {
h_wt <- (point[i,6] + point[i,7]*Age)/(point[i,1] + point[i,2]*Age + point[i,6] + point[i,7]*Age)
res_h_wt[,i] <- h_wt
h_ht <- (point[i,8])/(point[i,3] + point[i,4]*Age + point[i,8])
res_h_ht[,i] <- h_wt
h_ht_wt <- point[i,9]/(point[i,5] + point[i,9])
res_ht_wt[,i] <- h_ht_wt
r_G <- point[i,9]/(sqrt(point[i,6] + point[i,7]*Age)*sqrt(point[i,8]))
res_r_G[,i] <- r_G
std_1 <- sqrt(point[i,1] + point[i,2]*Age + point[i,6] + point[i,7]*Age)
std_2 <- sqrt(point[i,3] + point[i,4]*Age + point[i,8])
r_P <- (point[9] + point[5])/(std_1*std_2)
res_r_P[,i] <- r_P
r_E <- point[i,5]/(sqrt(point[i,1] + point[i,2]*Age)*sqrt(point[i,3] + point[i,4]*Age))
res_r_E[,i] <- r_E
}
Estimates <- c(rowMeans(res_h_wt), rowMeans(res_h_ht),
rowMeans(res_ht_wt),
rowMeans(res_r_G), rowMeans(res_r_E),
rowMeans(res_r_P))
Ic_Min <- c(apply(res_h_wt, 1, quantile, 0.025),
apply(res_h_ht, 1, quantile, 0.025),
apply(res_ht_wt, 1, quantile, 0.025),
apply(res_r_G, 1, quantile, 0.025),
apply(res_r_E, 1, quantile, 0.025),
apply(res_r_P, 1, quantile, 0.025))
Ic_Max <- c(apply(res_h_wt, 1, quantile, 0.975),
apply(res_h_ht, 1, quantile, 0.975),
apply(res_ht_wt, 1, quantile, 0.975),
apply(res_r_G, 1, quantile, 0.975),
apply(res_r_E, 1, quantile, 0.975),
apply(res_r_P, 1, quantile, 0.975))
data_graph <- data.frame("Estimates" = Estimates, "Ic_Min" = Ic_Min,
"Ic_Max" = Ic_Max, "Age" = rep(Age, 6),
"Parameter" = rep(c("h1","h2","h12","G","E","P"), each = 50))
head(data_graph)
ggplot(data_graph) +
geom_line(aes(x = Age, y = Estimates)) +
facet_wrap(~Parameter)
ggplot(data_graph) +
geom_line(aes(x = Age, y = Estimates)) +
geom_line(aes(x = Age, y = Ic_Min), col = "red") +
facet_wrap(~Parameter)
ggplot(data_graph) +
geom_line(aes(x = Age, y = Estimates)) +
geom_line(aes(x = Age, y = Ic_Min), col = "red") +
geom_line(aes(x = Age, y = Ic_Max), col = "red") +
facet_wrap(~Parameter)
